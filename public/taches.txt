
- Modification de handleChange pour détecter si l'input est une checkbox et utiliser la propriété checked au lieu de value
- Barre de chargement bouton
- Context pour stocker les infos clients / Rafraichissement de page
- Gérer le cgv en sync avec la désactivation du bouton de finalisation
- CSS Alexis specs ?
- Réécrire la fonction promesse afin d'avoir une fonction récursive sans passer par un while
- Factoriser CSS
-


Alexis : Ici je veux bien que tu hiérarchise l'erreur en la rapprochant du champ concerné, et en espacant un peu plus avec l'input du dessous stp.
A titre d'exemple j'ai mis 5px d'écart entre l'input "Pays/Région" et son message d'erreur, et 15 px d'écart entre le message d'erreur et "Prénom" et "Nom"



Création de la composante CustomCursor.
Création des animations et du CSS CustomCursor.
Mise en place de CustomCursor dans App.
Correction du CSS de la page Payment.

- Section fixé
- Modification structure et style de la popuppage
- séparation de Item.tsx en Vitrine.tsx 
- Implementation du scroll entre vitrine et gallery
- Bandeau changé en Header
- ajustement du style de Ordersummary de la page Basket.
- detection du panier vide et affichage de la page panier vide dynamiquement
- removebasket change : supprimer complètement les articles qui ont une quantité de 0, au lieu de les garder avec id: 0 dans l'objet basket
- séparation des fonctions de requetes paypal, tout est mis dans PaymentServices.tsx dorénavant, pour alléger le fichier Payment.tsx
- promise All plutot que fetch un à un les prix des items du panier pour les additionner (useeffect( calculateprice())
- Gestion correcte de la valeur des checkbox dans le formulaire ,traitement des checkbox avec checked au lieu de value.
